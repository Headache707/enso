const fs = require('fs');
const path = require('path');
const puppeteer = require('puppeteer');
const axios = require('axios');

const profilePort = process.argv[2]; // –Ω–∞–ø—Ä–∏–º–µ—Ä: 3001
const taskPath = path.join(__dirname, 'scripts', 'generated_task.json');

if (!profilePort) {
  console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—Ç –ø—Ä–æ—Ñ–∏–ª—è: node runner.js <port>');
  process.exit(1);
}

(async () => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º wsEndpoint –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è Dolphin —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç
    const versionInfo = await axios.get(`http://127.0.0.1:${profilePort}/json/version`);
    const browser = await puppeteer.connect({ browserWSEndpoint: versionInfo.data.webSocketDebuggerUrl });

    const page = await browser.newPage();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
    const script = JSON.parse(fs.readFileSync(taskPath, 'utf-8'));

    const executedClickIds = new Set();

    for (const step of script) {
      if (step.clickId && executedClickIds.has(step.clickId)) {
        continue; // —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –∫–ª–∏–∫ –∏–∑ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
      }

      try {
        switch (step.action) {
          case 'setViewport':
            console.log(`üñ•Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ viewport: ${step.width}x${step.height}`);
            await page.setViewport({ width: step.width, height: step.height });
            break;

          case 'goto':
            console.log(`üåê –ü–µ—Ä–µ—Ö–æ–¥: ${step.url}`);
            await page.goto(step.url, { waitUntil: 'networkidle2' });
            break;

          case 'wait':
            const time =
              typeof step.time === 'string' && step.time.startsWith('RANDOM(')
                ? (() => {
                    const [min, max] = step.time
                      .match(/RANDOM\((\d+)-(\d+)\)/)
                      .slice(1)
                      .map(Number);
                    return Math.floor(Math.random() * (max - min + 1)) + min;
                  })()
                : step.time;
            console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${time} –º—Å`);
            await page.waitForTimeout(time);
            break;

          case 'waitForSelector':
            console.log(`üîç –û–∂–∏–¥–∞–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞: ${step.selector}`);
            await page.waitForSelector(step.selector, { timeout: 10000 });
            break;

          case 'hover':
            console.log(`üñ±Ô∏è Hover –Ω–∞ ${step.selector}`);
            await page.hover(step.selector);
            break;

          case 'click':
            if (step.selectors && Array.isArray(step.selectors)) {
              let clicked = false;

              for (const sel of step.selectors) {
                try {
                  const el = await page.$(sel);
                  if (!el) continue;

                  const box = await el.boundingBox();
                  if (!box) continue;

                  const offset = {
                    x:
                      typeof step.offset.x === 'string' && step.offset.x.startsWith('RANDOM(')
                        ? (() => {
                            const [min, max] = step.offset.x.match(/RANDOM\((\d+)-(\d+)\)/).slice(1).map(Number);
                            return Math.floor(Math.random() * (max - min + 1)) + min;
                          })()
                        : step.offset.x || box.width / 2,
                    y:
                      typeof step.offset.y === 'string' && step.offset.y.startsWith('RANDOM(')
                        ? (() => {
                            const [min, max] = step.offset.y.match(/RANDOM\((\d+)-(\d+)\)/).slice(1).map(Number);
                            return Math.floor(Math.random() * (max - min + 1)) + min;
                          })()
                        : step.offset.y || box.height / 2
                  };

                  const clickX = box.x + offset.x;
                  const clickY = box.y + offset.y;

                  console.log(`‚úÖ –ö–ª–∏–∫ –ø–æ ${sel} (${clickX.toFixed(0)}, ${clickY.toFixed(0)})`);
                  await page.mouse.click(clickX, clickY);
                  clicked = true;
                  if (step.clickId) executedClickIds.add(step.clickId);
                  break;
                } catch (e) {
                  console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ ${sel}: ${e.message}`);
                }
              }

              if (!clicked) {
                console.warn(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É –∏–∑ fallback-–≥—Ä—É–ø–ø—ã`);
              }
            } else {
              console.log(`‚ö†Ô∏è Click –±–µ–∑ fallback, –ø–æ ${step.selector}`);
              await page.click(step.selector);
              if (step.clickId) executedClickIds.add(step.clickId);
            }
            break;

          default:
            console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${step.action}`);
        }
      } catch (err) {
        console.error(`üí• –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ ${step.action}: ${err.message}`);
      }
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤–∫–ª–∞–¥–∫–∏
    await page.close();
    console.log('‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–∫–ª–∞–¥–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞.');
    process.exit(0);
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ runner.js:', e.message);
    process.exit(1);
  }
})();
