const fs = require('fs');
const path = require('path');
const readline = require('readline');

const CAPSULES_DIR = path.join(__dirname, 'capsules');
const SCRIPTS_DIR = path.join(__dirname, 'scripts');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function prompt(q) {
  return new Promise(res => rl.question(q, answer => res(answer.trim())));
}

function listProfiles() {
  const files = fs.readdirSync(CAPSULES_DIR).filter(f => f.endsWith('.json'));
  return files.map(f => path.basename(f, '.json'));
}

async function addProfile() {
  const id = await prompt('üÜî –í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ—Ñ–∏–ª—è: ');
  const port = await prompt('üîå –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç –ø—Ä–æ—Ñ–∏–ª—è: ');

  const filePath = path.join(CAPSULES_DIR, `${port}.json`);
  const profile = {
    id,
    port: parseInt(port, 10),
    tasks: []
  };

  fs.writeFileSync(filePath, JSON.stringify(profile, null, 2));
  console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å ${id} —Å–æ–∑–¥–∞–Ω.`);
}

async function viewProfileTasks() {
  const profiles = listProfiles();
  if (!profiles.length) return console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π.');

  console.log('üìÑ –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π:');
  profiles.forEach((p, i) => console.log(`${i + 1}. ${p}`));
  const index = parseInt(await prompt('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è: '), 10) - 1;

  const port = profiles[index];
  const filePath = path.join(CAPSULES_DIR, `${port}.json`);
  const raw = fs.readFileSync(filePath, 'utf-8');
  const profile = JSON.parse(raw);

  if (!profile.tasks || !profile.tasks.length) {
    return console.log('‚ÑπÔ∏è –£ —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç –∑–∞–¥–∞—á.');
  }

  console.log(`üìã –ó–∞–¥–∞—á–∏ –ø—Ä–æ—Ñ–∏–ª—è ${profile.id} (${profile.port}):`);
  profile.tasks.forEach((t, i) => console.log(`${i + 1}. [${t.cron}] ‚Üí ${t.script}`));
}

async function addTaskToProfile() {
  const profiles = listProfiles();
  if (!profiles.length) return console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π.');

  console.log('üìÑ –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π:');
  profiles.forEach((p, i) => console.log(`${i + 1}. ${p}`));
  const index = parseInt(await prompt('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è: '), 10) - 1;

  const port = profiles[index];
  const filePath = path.join(CAPSULES_DIR, `${port}.json`);
  const raw = fs.readFileSync(filePath, 'utf-8');
  const profile = JSON.parse(raw);

  const cron = await prompt('‚è± –í–≤–µ–¥–∏—Ç–µ cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, */5 * * * *): ');
  const scriptName = await prompt('üìú –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–∫—Ä–∏–ø—Ç–∞ (–∏–∑ –ø–∞–ø–∫–∏ scripts): ');
  const scriptPath = path.join(SCRIPTS_DIR, scriptName);

  if (!fs.existsSync(scriptPath)) {
    console.log(`‚ùå –°–∫—Ä–∏–ø—Ç ${scriptName} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ scripts`);
    return mainMenu();
  }

  const task = { cron, script: scriptName };
  const exists = profile.tasks.find(t => t.script === scriptName);

  if (exists) {
    console.log('‚ö†Ô∏è –¢–∞–∫–∞—è –∑–∞–¥–∞—á–∞ —É–∂–µ –µ—Å—Ç—å. –ó–∞–º–µ–Ω—è—é...');
    profile.tasks = profile.tasks.filter(t => t.script !== scriptName);
  }

  profile.tasks.push(task);
  fs.writeFileSync(filePath, JSON.stringify(profile, null, 2));
  console.log('‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.');
}

async function clearTasks() {
  const mode = await prompt('1. –û—á–∏—Å—Ç–∏—Ç—å –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å\n2. –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ\n–í—ã–±–µ—Ä–∏—Ç–µ: ');
  const profiles = listProfiles();

  if (mode === '1') {
    profiles.forEach((p, i) => console.log(`${i + 1}. ${p}`));
    const index = parseInt(await prompt('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è: '), 10) - 1;
    const port = profiles[index];
    const filePath = path.join(CAPSULES_DIR, `${port}.json`);
    const raw = fs.readFileSync(filePath, 'utf-8');
    const profile = JSON.parse(raw);
    profile.tasks = [];
    fs.writeFileSync(filePath, JSON.stringify(profile, null, 2));
    console.log('üßπ –ó–∞–¥–∞—á–∏ –æ—á–∏—â–µ–Ω—ã.');
  } else if (mode === '2') {
    for (const port of profiles) {
      const filePath = path.join(CAPSULES_DIR, `${port}.json`);
      const raw = fs.readFileSync(filePath, 'utf-8');
      const profile = JSON.parse(raw);
      profile.tasks = [];
      fs.writeFileSync(filePath, JSON.stringify(profile, null, 2));
    }
    console.log('üßº –í—Å–µ –∑–∞–¥–∞—á–∏ –æ—á–∏—â–µ–Ω—ã.');
  } else {
    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä');
  }
}

async function mainMenu() {
  console.log('\nüîß –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏:\n1. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n2. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏ –ø—Ä–æ—Ñ–∏–ª—è\n3. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n4. –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á–∏\n5. –í—ã—Ö–æ–¥');

  const choice = await prompt('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ');

  switch (choice) {
    case '1':
      await addProfile();
      break;
    case '2':
      await viewProfileTasks();
      break;
    case '3':
      await addTaskToProfile();
      break;
    case '4':
      await clearTasks();
      break;
    case '5':
      rl.close();
      process.exit(0);
      break;
    default:
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä');
  }

  mainMenu();
}

mainMenu();
